<?xml version="1.0"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
                       xmlns:s="library://ns.adobe.com/flex/spark"
                       xmlns:local="*"
                       width="100%" height="100%" minWidth="1136" minHeight="640" frameRate="60"
                       creationComplete="onCreationComplete(event)" showStatusBar="false"
                       initialize="onInitialize(event)">
    <fx:Script>
        import com.greensock.TweenMax;

        import mx.events.FlexEvent;

        private var drag:Point = null;

        public static const MAX_ZOOM:Number = 3;


        private function onInitialize(event:FlexEvent):void {
            map.addEventListener(Map.MAP_PROGRESS, onMapProgress);
        }

        private function onCreationComplete(event:FlexEvent):void {
            systemManager.stage.addEventListener(Event.ENTER_FRAME, onFrame);
            systemManager.stage.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
            systemManager.stage.addEventListener(MouseEvent.MOUSE_UP, onMouseUp);
            systemManager.stage.addEventListener(MouseEvent.MOUSE_WHEEL, onMouseWheel);
            systemManager.stage.addEventListener(Event.RESIZE, onResize);
            systemManager.stage.addEventListener(KeyboardEvent.KEY_UP, onKeyUp);

            buttonGenerate.addEventListener(MouseEvent.CLICK, onButtonGenerateClick);
        }

        private function onMouseWheel(event:MouseEvent):void {
            var scale:Number;
            if (event.delta > 0) {
                // Zooming in
                scale = MAX_ZOOM;
            } else {
                // Zooming out
                scale = 1;
            }

            // Get center
            var p:Point = map.globalToLocal(new Point(stage.stageWidth / 2,
                    stage.stageHeight / 2));


            var m:Matrix = new Matrix();
            m.translate(-p.x,
                    -p.y);
            m.scale(scale,
                    scale);
            p = map.localToGlobal(p);
            m.translate(p.x,
                    p.y);
            p = m.transformPoint(new Point());

            map.staticModeOn();
            TweenMax.killTweensOf(map);
            TweenMax.to(map,
                    .3,
                    {
                        x: p.x,
                        y: p.y,
                        scaleX: scale,
                        scaleY: scale,
                        onComplete: function ():void {
                            map.staticModeOff();
                        }
                    });
        }

        private function onButtonGenerateClick(event:MouseEvent):void {
            start();
        }

        private function start():void {
            var r:int = int(Math.random() * 9999);
            if (inputSeed.text.length > 0)
                r = int(inputSeed.text);

            map.start(r);
        }

        private function onMapProgress(event:PayloadEvent):void {
            var percent:Number = event.payload.percent;
            var message:String = event.payload.message;

            progress.visible = percent != 1;
            hint.visible = !progress.visible;
            progressMessage.text = message + " (" + int(percent * 100) + "%)";

            labelSeed.text = "Seed: " + map.seed;
        }

        public function onKeyUp(event:KeyboardEvent):void {
            switch (event.keyCode) {
                case Keyboard.Q:
                    // Toggle outlines
                    map.showOutlines = !map.showOutlines;
                    map.draw();
                    break;
                case Keyboard.W:
                    map.showRivers = !map.showRivers;
                    map.draw();
                    break;
                case Keyboard.E:
                    // Toggle Temperature
                    map.showTemperature = !map.showTemperature;
                    map.draw();
                    break;
                case Keyboard.F:
                    // Toggle Forests
                    map.showForests = !map.showForests;
                    map.draw();
                    break;
                case Keyboard.R:
                    // Generate with a new seed
                    start();
                    break;
                case Keyboard.T:
                    // Toggle terrain
                    map.showTerrain = !map.showTerrain;
                    map.draw();
                    break;
                case Keyboard.Y:
                    // Toggle mountains
                    map.showMountains = !map.showMountains;
                    map.draw();
                    break;
                case Keyboard.D:
                    // Toggle desirability
                    map.showDesirability = !map.showDesirability;
                    map.draw();
                    break;
                case Keyboard.S:
                    // Toggle settlements
                    map.showSettlements = !map.showSettlements;
                    map.draw();
                    break;
            }
        }

        private function onResize(event:Event):void {
            constrain();
        }

        private function onFrame(event:Event):void {
            if (drag) {
                // Drag
                var newX:Number = systemManager.stage.mouseX - drag.x;
                var newY:Number = systemManager.stage.mouseY - drag.y;
                map.x += (newX - map.x) / 5;
                map.y += (newY - map.y) / 5;
                constrain();
            }
        }

        private function constrain():void {
            // Constrain
            if (map.x > 0)
                map.x = 0;
            if (map.y > 0)
                map.y = 0;
            if (width - map.width * map.scaleX > map.x)
                map.x = width - map.width * map.scaleX;
            if (height - map.height * map.scaleY > map.y)
                map.y = height - map.height * map.scaleY;
        }

        private function onMouseDown(event:MouseEvent):void {
            drag = new Point(systemManager.stage.mouseX - map.x, systemManager.stage.mouseY - map.y);
        }

        private function onMouseUp(event:MouseEvent):void {
            drag = null;
        }
    </fx:Script>

    <local:Map id="map" cacheAsBitmap="true"
               width="{2272}" height="{1280}" includeInLayout="false"/>
    <!--width="1136" height="640" includeInLayout="false"/>-->
    <s:VGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
        <s:Group id="progress" width="100%" height="100%">
            <s:Rect width="100%" height="100%">
                <s:fill>
                    <s:SolidColor color="0x000000" alpha=".6"/>
                </s:fill>
            </s:Rect>
            <s:VGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
                <s:Label id="progressMessage" fontSize="24" color="white"/>
            </s:VGroup>
        </s:Group>
    </s:VGroup>
    <s:Group width="100%" id="hint">
        <s:Rect width="100%" height="100%">
            <s:fill>
                <s:SolidColor color="0x000000" alpha=".6"/>
            </s:fill>
        </s:Rect>
        <s:HGroup width="100%" top="10" bottom="10" left="10" right="10" verticalAlign="middle">
            <s:Button id="buttonGenerate" label="New Map" fontSize="14"/>
            <s:TextInput id="inputSeed" restrict="[0-9]" width="40" fontSize="14"/>
            <s:Label id="labelSeed" color="white" fontSize="14"/>
        </s:HGroup>
    </s:Group>

</s:WindowedApplication>